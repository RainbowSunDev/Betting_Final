/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

var dg = {};
/**
 * 代理发起rest请求
 *  该函数依赖 Jquery
 * @param {type} url 请求地址
 * @param {type} data 请求参数 JSON
 * @param {type} success 处理结果的方法
 * @param {type} error 请求失败的方法
 * @returns {undefined}
 */
dg.rest = function (url, data, success, error) {
    $.ajax({
        url: url,
        type: 'post',
        data: JSON.stringify(data),
        contentType: 'application/json',
        dataType: 'json',
        success: success,
        error: error
    });
};

dg.log = function (messages) {
    console && console.log(messages);
};

/**
 * 将剩余秒数格式化成 day HH:mm:ss格式
 * @param {type} seconds 剩余秒数
 * @returns {String}
 */
dg.parseSecond = function (seconds) {
    var day = parseInt(seconds / 86400);
    var hour = parseInt(seconds % 86400 / 3600);
    var minute = parseInt(seconds % 3600 / 60);
    var second = parseInt(seconds % 60);
    var dd = "";
    if (day > 0) {
        dd += day + " ";
    }
    if (hour > 0) {
        if (hour < 10) {
            dd += "0" + hour + ":";
        } else {
            dd += hour + ":";
        }
    } else if (dd && hour === 0) {
        dd += "00:";
    }
    if (minute > 0) {
        if (minute < 10) {
            dd += "0" + minute + ":";
        } else {
            dd += minute + ":";
        }
    } else if (dd && minute === 0) {
        dd += "00:";
    }
    if (second >= 0) {
        if (second < 10) {
            dd += "0" + second;
        } else {
            dd += second;
        }
    } else if (dd && second === 0) {
        dd += "00";
    }
    return dd;
};

/**
 * 检查data对象有没有值是空的
 *  用于检查赔率信息对象信息是否完整
 * @param {type} data 赔率信息对象
 * @param {type} expect 期望最小值, number类型
 * @returns {Boolean} true 表示所有属性均有值
 */
dg.checkData = function (data, expect) {
    for (var key in data) {
        if (typeof data[key] === 'object') {
            if (!checkData(data[key])) {
                return false;
            }
        } else {
            if (data[key] < expect) {
                return false;
            }
        }
    }
    return true;
};

dg.add = function (pack, data) {
    dg.rest(pack + "/add", data, function (data) {
        if (data.codeId === 0) {
            alert(dg.parseCode(0));
            location.reload();
        } else {
            showMessage('failure', 3000);
        }
    }, function (e) {
        showMessage('network_anomaly', 3000);
        console.log(e);
    });
};

dg.loadAdd = function (pack, title) {
    $.get(pack + "/add", {}, function (data) {
        showModal(title, data);
    }, 'html');
};

dg.loadUpdate = function (pack, title, id) {
    $.get(pack + "/update", {id: id}, function (data) {
        showModal(title, data);
    }, 'html');
};

dg.update = function (pack, data) {
    dg.rest(pack + "/update", data, function (data) {
        if (data.codeId === 0) {
            alert(dg.parseCode(0));
            location.reload();
        } else {
            showMessage('failure', 3000);
        }
    }, function (e) {
        showMessage('network_anomaly', 3000);
        console.log(e);
    });
};

dg.delete = function (pack, id) {
    $.get(pack + "/del", {id: id}, function (data) {
        if (data.codeId === 0) {
            alert(dg.parseCode(0));
            location.reload();
        } else {
            showMessage('failure', 3000);
        }
    }, "json");
};

dg.parseCode = function (codeId, lang) {
    if (!lang) {
        lang = 1;
    }
    var mess = dg.codes[codeId];
    if (mess) {
        return mess[lang];
    }
    return dg.codes[98][lang];
};

dg.codes = {};
dg.codes[0] = ["success", "操作成功"];
dg.codes[1] = ["params error", "参数错误"];

dg.codes[98] = ["failure", "操作失败"];
dg.codes[406] = ["time out", "请求超时"];
dg.codes[408] = ["net error", "网络异常"];
dg.codes[1402] = ["no result", "没有结果"];

// 对Date的扩展，将 Date 转化为指定格式的String
// 月(M)、日(d)、小时(h)、分(m)、秒(s)、季度(q) 可以用 1-2 个占位符， 
// 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字) 
// 例子： 
// (new Date()).Format("yyyy-MM-dd hh:mm:ss.S") ==> 2006-07-02 08:09:04.423 
// (new Date()).Format("yyyy-M-d h:m:s.S")      ==> 2006-7-2 8:9:4.18 
/**
 * 
 * @param {type} fmt
 * @param {type} zone -8 表示东8区
 * @returns {unresolved}
 */
Date.prototype.Format = function (fmt, zone) { //author: meizz 
    if (zone) {
        this.timeZone = function (zone) { //author: meizz 
            var hour = this.getUTCHours() - this.getHours() + zone;
            this.setTime(this.getTime() + hour * 3600000);
            return this;
        };
    }
    var o = {
        "M+": this.getMonth() + 1, //月份 
        "d+": this.getDate(), //日 
        "h+": this.getHours(), //小时 
        "m+": this.getMinutes(), //分 
        "s+": this.getSeconds(), //秒 
        "q+": Math.floor((this.getMonth() + 3) / 3), //季度 
        "S": this.getMilliseconds() //毫秒 
    };
    if (/(y+)/.test(fmt))
        fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
    for (var k in o)
        if (new RegExp("(" + k + ")").test(fmt))
            fmt = fmt.replace(RegExp.$1, (RegExp.$1.length === 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
    return fmt;
};

Date.prototype.timeZone = function (zone) { //author: meizz 
    var hour = this.getUTCHours() - this.getHours() + zone;
    this.setTime(this.getTime() + hour * 3600000);
    return this;
};

Date.prototype.addDate = function (date) {
    var mDate = new Date(this.valueOf());
    mDate.setDate(mDate.getDate() + date);
    return mDate;
};

Date.prototype.addDay = function (day) {
    var mDate = new Date(this.valueOf());
    mDate.setDay(mDate.getDay() + day);
    return mDate;
};

Date.prototype.addMonth = function (month) {
    var mDate = new Date(this.valueOf());
    mDate.setMonth(mDate.getMonth() + month);
    return mDate;
};

Date.prototype.getMonday = function () {
    var day = this.getDay() || 7;
    if (day !== 1)
        this.setHours(-24 * (day - 1));
    return this;
};

/**
 * 日期范围工具类
 */
var dateRangeUtil = (function () {
    /***
     * 获得当前时间
     */
    this.getCurrentDate = function () {
        return new Date();
    };

    /***
     * 获得本周起止时间
     */
    this.getCurrentWeek = function () {
        //起止日期数组 
        var startStop = new Array();
        //获取当前时间 
        var currentDate = this.getCurrentDate();
        //返回date是一周中的某一天 
        var week = currentDate.getDay();
        //返回date是一个月中的某一天 
        var month = currentDate.getDate();

        //一天的毫秒数 
        var millisecond = 1000 * 60 * 60 * 24;
        //减去的天数 
        var minusDay = week !== 0 ? week - 1 : 6;
        //alert(minusDay); 
        //本周 周一 
        var monday = new Date(currentDate.getTime() - (minusDay * millisecond));
        //本周 周日 
        var sunday = new Date(monday.getTime() + (6 * millisecond));
        //添加本周时间 
        startStop.push(monday); //本周起始时间 
        //添加本周最后一天时间 
        startStop.push(sunday); //本周终止时间 
        //返回 
        return startStop;
    };

    /***
     * 获得本月的起止时间
     */
    this.getCurrentMonth = function () {
        //起止日期数组 
        var startStop = new Array();
        //获取当前时间 
        var currentDate = this.getCurrentDate();
        //获得当前月份0-11 
        var currentMonth = currentDate.getMonth();
        //获得当前年份4位年 
        var currentYear = currentDate.getFullYear();
        //求出本月第一天 
        var firstDay = new Date(currentYear, currentMonth, 1);


        //当为12月的时候年份需要加1 
        //月份需要更新为0 也就是下一年的第一个月 
        if (currentMonth === 11) {
            currentYear++;
            currentMonth = 0; //就为 
        } else {
            //否则只是月份增加,以便求的下一月的第一天 
            currentMonth++;
        }

        //一天的毫秒数 
        var millisecond = 1000 * 60 * 60 * 24;
        //下月的第一天 
        var nextMonthDayOne = new Date(currentYear, currentMonth, 1);
        //求出上月的最后一天 
        var lastDay = new Date(nextMonthDayOne.getTime() - millisecond);

        //添加至数组中返回 
        startStop.push(firstDay);
        startStop.push(lastDay);
        //返回 
        return startStop;
    };

    /**
     * 得到本季度开始的月份
     * @param month 需要计算的月份
     ***/
    this.getQuarterSeasonStartMonth = function (month) {
        var spring = 0; //春 
        var summer = 3; //夏 
        var fall = 6;   //秋 
        var winter = 9; //冬 
        //月份从0-11 
        if (month < 3) {
            return spring;
        }
        if (month < 6) {
            return summer;
        }
        if (month < 9) {
            return fall;
        }
        return winter;
    };

    /**
     * 获得该月的天数
     * @param year年份
     * @param month月份
     * */
    this.getMonthDays = function (year, month) {
        //本月第一天 1-31 
        var relativeDate = new Date(year, month, 1);
        //获得当前月份0-11 
        var relativeMonth = relativeDate.getMonth();
        //获得当前年份4位年 
        var relativeYear = relativeDate.getFullYear();

        //当为12月的时候年份需要加1 
        //月份需要更新为0 也就是下一年的第一个月 
        if (relativeMonth === 11) {
            relativeYear++;
            relativeMonth = 0;
        } else {
            //否则只是月份增加,以便求的下一月的第一天 
            relativeMonth++;
        }
        //一天的毫秒数 
        var millisecond = 1000 * 60 * 60 * 24;
        //下月的第一天 
        var nextMonthDayOne = new Date(relativeYear, relativeMonth, 1);
        //返回得到上月的最后一天,也就是本月总天数 
        return new Date(nextMonthDayOne.getTime() - millisecond).getDate();
    };

    /**
     * 获得本季度的起止日期
     */
    this.getCurrentSeason = function () {
        //起止日期数组 
        var startStop = new Array();
        //获取当前时间 
        var currentDate = this.getCurrentDate();
        //获得当前月份0-11 
        var currentMonth = currentDate.getMonth();
        //获得当前年份4位年 
        var currentYear = currentDate.getFullYear();
        //获得本季度开始月份 
        var quarterSeasonStartMonth = this.getQuarterSeasonStartMonth(currentMonth);
        //获得本季度结束月份 
        var quarterSeasonEndMonth = quarterSeasonStartMonth + 2;

        //获得本季度开始的日期 
        var quarterSeasonStartDate = new Date(currentYear, quarterSeasonStartMonth, 1);
        //获得本季度结束的日期 
        var quarterSeasonEndDate = new Date(currentYear, quarterSeasonEndMonth, this.getMonthDays(currentYear, quarterSeasonEndMonth));
        //加入数组返回 
        startStop.push(quarterSeasonStartDate);
        startStop.push(quarterSeasonEndDate);
        //返回 
        return startStop;
    };

    /***
     * 得到本年的起止日期
     *
     */
    this.getCurrentYear = function () {
        //起止日期数组 
        var startStop = new Array();
        //获取当前时间 
        var currentDate = this.getCurrentDate();
        //获得当前年份4位年 
        var currentYear = currentDate.getFullYear();

        //本年第一天 
        var currentYearFirstDate = new Date(currentYear, 0, 1);
        //本年最后一天 
        var currentYearLastDate = new Date(currentYear, 11, 31);
        //添加至数组 
        startStop.push(currentYearFirstDate);
        startStop.push(currentYearLastDate);
        //返回 
        return startStop;
    };

    /**
     * 返回上一个月的第一天Date类型
     * @param year 年
     * @param month 月
     **/
    this.getPriorMonthFirstDay = function (year, month) {
        //年份为0代表,是本年的第一月,所以不能减 
        if (month === 0) {
            month = 11; //月份为上年的最后月份 
            year--; //年份减1 
            return new Date(year, month, 1);
        }
        //否则,只减去月份 
        month--;
        return new Date(year, month, 1);
    };

    /**
     * 获得上一月的起止日期
     * ***/
    this.getPreviousMonth = function () {
        //起止日期数组 
        var startStop = new Array();
        //获取当前时间 
        var currentDate = this.getCurrentDate();
        //获得当前月份0-11 
        var currentMonth = currentDate.getMonth();
        //获得当前年份4位年 
        var currentYear = currentDate.getFullYear();
        //获得上一个月的第一天 
        var priorMonthFirstDay = this.getPriorMonthFirstDay(currentYear, currentMonth);
        //获得上一月的最后一天 
        var priorMonthLastDay = new Date(priorMonthFirstDay.getFullYear(), priorMonthFirstDay.getMonth(), this.getMonthDays(priorMonthFirstDay.getFullYear(), priorMonthFirstDay.getMonth()));
        //添加至数组 
        startStop.push(priorMonthFirstDay);
        startStop.push(priorMonthLastDay);
        //返回 
        return startStop;
    };


    /**
     * 获得上一周的起止日期
     * **/
    this.getPreviousWeek = function () {
        //起止日期数组 
        var startStop = new Array();
        //获取当前时间 
        var currentDate = this.getCurrentDate();
        //返回date是一周中的某一天 
        var week = currentDate.getDay();
        //返回date是一个月中的某一天 
        var month = currentDate.getDate();
        //一天的毫秒数 
        var millisecond = 1000 * 60 * 60 * 24;
        //减去的天数 
        var minusDay = week !== 0 ? week - 1 : 6;
        //获得当前周的第一天 
        var currentWeekDayOne = new Date(currentDate.getTime() - (millisecond * minusDay));
        //上周最后一天即本周开始的前一天 
        var priorWeekLastDay = new Date(currentWeekDayOne.getTime() - millisecond);
        //上周的第一天 
        var priorWeekFirstDay = new Date(priorWeekLastDay.getTime() - (millisecond * 6));
        //添加至数组 
        startStop.push(priorWeekFirstDay);
        startStop.push(priorWeekLastDay);
        return startStop;
    };

    /**
     * 得到上季度的起始日期
     * year 这个年应该是运算后得到的当前本季度的年份
     * month 这个应该是运算后得到的当前季度的开始月份
     * */
    this.getPriorSeasonFirstDay = function (year, month) {
        var spring = 0; //春 
        var summer = 3; //夏 
        var fall = 6;   //秋 
        var winter = 9; //冬 
        //月份从0-11 
        switch (month) {//季度的其实月份 
            case 1:
                month = winter;
                break;
            case 2:
                month = winter;
                break;
            case 3:
                month = winter;
                break;
            case 4:
                month = spring;
                break;
            case 5:
                month = spring;
                break;
            case 6:
                month = spring;
                break;
            case 7:
                month = summer;
                break;
            case 8:
                month = summer;
                break;
            case 9:
                month = summer;
                break;
            case 10:
                month = spring;
                break;
            case 11:
                month = spring;
                break;
            case 0:
                month = spring;
                break;

        }
        return new Date(year, month, 1);
    };

    /**
     * 得到上季度的起止日期
     * **/
    this.getPreviousSeason = function () {
        //起止日期数组 
        var startStop = new Array();
        //获取当前时间 
        var currentDate = this.getCurrentDate();
        //获得当前月份0-11 
        var currentMonth = currentDate.getMonth();
        //获得当前年份4位年 
        var currentYear = currentDate.getFullYear();
        //上季度的第一天 
        var priorSeasonFirstDay = this.getPriorSeasonFirstDay(currentYear, currentMonth);
        //上季度的最后一天 
        var priorSeasonLastDay = new Date(priorSeasonFirstDay.getFullYear(), priorSeasonFirstDay.getMonth() + 2, this.getMonthDays(priorSeasonFirstDay.getFullYear(), priorSeasonFirstDay.getMonth() + 2));
        //添加至数组 
        startStop.push(priorSeasonFirstDay);
        startStop.push(priorSeasonLastDay);
        return startStop;
    };

    /**
     * 得到去年的起止日期
     * **/
    this.getPreviousYear = function () {
        //起止日期数组 
        var startStop = new Array();
        //获取当前时间 
        var currentDate = this.getCurrentDate();
        //获得当前年份4位年 
        var currentYear = currentDate.getFullYear();
        currentYear--;
        var priorYearFirstDay = new Date(currentYear, 0, 1);
        var priorYearLastDay = new Date(currentYear, 11, 1);
        //添加至数组 
        startStop.push(priorYearFirstDay);
        startStop.push(priorYearLastDay);
        return startStop;
    };
    return this;
})();